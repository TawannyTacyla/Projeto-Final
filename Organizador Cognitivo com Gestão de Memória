from collections import deque
import heapq

# -------------------------
# Estruturas de Dados
# -------------------------

# Lista: caixa de entrada (registro bruto)
caixa_entrada = []

# Pilha: mem√≥ria de curto prazo (√∫ltimas tarefas registradas)
memoria_curta = []

# Fila: execu√ß√£o planejada
fila_execucao = deque()

# √Årvore de categorias (simulada como dicion√°rio aninhado)
categorias = {
    "Estudo": ["Revisar conte√∫do", "Fazer exerc√≠cio", "Assistir aula"],
    "Trabalho": ["Responder e-mails", "Preparar relat√≥rio"],
    "Pessoal": ["Ligar para algu√©m", "Marcar consulta"]
}

# Hash Table: metadados das tarefas (tempo, prioridade, categoria)
metadados = {}

# Heap para classifica√ß√£o autom√°tica (menor prioridade = mais urgente)
heap_prioridade = []  # (pontua√ß√£o, tarefa)


# -------------------------
# Fun√ß√µes do Sistema
# -------------------------

def registrar_tarefa():
    print("\n=== Registrar nova tarefa ===")
    tarefa = input("Descreva a tarefa: ")
    categoria = input("Categoria (Estudo, Trabalho, Pessoal): ")
    tempo = int(input("Tempo estimado (em minutos): "))
    prioridade = int(input("N√≠vel de prioridade (1=m√°xima, 5=m√≠nima): "))

    # Adiciona √†s estruturas
    caixa_entrada.append(tarefa)
    memoria_curta.append(tarefa)
    metadados[tarefa] = {
        "tempo": tempo,
        "prioridade": prioridade,
        "categoria": categoria
    }

    # Classifica√ß√£o autom√°tica
    score = prioridade + (tempo // 30)  # pondera tempo e prioridade
    heapq.heappush(heap_prioridade, (score, tarefa))
    print(f"Tarefa '{tarefa}' registrada com sucesso!")


def planejar_execucao():
    print("\n=== Planejar Execu√ß√£o ===")
    while heap_prioridade:
        _, tarefa = heapq.heappop(heap_prioridade)
        fila_execucao.append(tarefa)
        print(f"Adicionada √† fila: {tarefa}")


def executar_tarefa():
    if fila_execucao:
        tarefa = fila_execucao.popleft()
        print(f"\nExecutando tarefa: {tarefa}")
    else:
        print("\nNenhuma tarefa planejada no momento.")


def desfazer_ultima():
    if memoria_curta:
        tarefa = memoria_curta.pop()
        caixa_entrada.remove(tarefa)
        metadados.pop(tarefa, None)
        print(f"\nTarefa desfeita: {tarefa}")
    else:
        print("\nNada a desfazer.")


def mostrar_tarefas():
    print("\n=== Tarefas Registradas ===")
    if not caixa_entrada:
        print("Nenhuma tarefa registrada.")
        return
    for tarefa in caixa_entrada:
        dados = metadados.get(tarefa, {})
        print(f"- {tarefa} | Categoria: {dados.get('categoria')} | Tempo: {dados.get('tempo')}min | Prioridade: {dados.get('prioridade')}")


def exibir_categorias():
    print("\n=== Categorias (√Årvore Simulada) ===")
    for cat, tarefas in categorias.items():
        print(f"{cat}:")
        for t in tarefas:
            print(f"  ‚îî‚îÄ {t}")


# -------------------------
# Interface Principal
# -------------------------

def main():
    print("üß† MindStack ‚Äì Organizador Cognitivo com Gest√£o de Mem√≥ria")

    while True:
        print("\nMenu:")
        print("[1] Registrar nova tarefa")
        print("[2] Mostrar tarefas registradas")
        print("[3] Planejar execu√ß√£o")
        print("[4] Executar pr√≥xima tarefa")
        print("[5] Desfazer √∫ltima tarefa")
        print("[6] Ver categorias (√°rvore)")
        print("[0] Sair")
        opcao = input("Escolha: ")

        if opcao == "1":
            registrar_tarefa()
        elif opcao == "2":
            mostrar_tarefas()
        elif opcao == "3":
            planejar_execucao()
        elif opcao == "4":
            executar_tarefa()
        elif opcao == "5":
            desfazer_ultima()
        elif opcao == "6":
            exibir_categorias()
        elif opcao == "0":
            print("Encerrando MindStack. At√© logo!")
            break
        else:
            print("Op√ß√£o inv√°lida.")

if __name__ == "__main__":
    main()
